// Generated by CoffeeScript 2.7.0
(function() {
  // CoffeeScript ESM loader

  // Usage:
  // node --loader coffeescript/esm source.coffee
  var CoffeeScript, baseURL, cacheSourceMaps, fileURLToPath, fs, getRootModule, module, nodeSourceMapsSupportEnabled, patchStackTrace, path, pathToFileURL, ref;

  CoffeeScript = require('./');

  fs = require('fs');

  module = require('module');

  path = require('path');

  ({fileURLToPath, pathToFileURL} = require('url'));

  ({patchStackTrace} = CoffeeScript);

  nodeSourceMapsSupportEnabled = (typeof process !== "undefined" && process !== null) && (process.execArgv.includes('--enable-source-maps') || ((ref = process.env.NODE_OPTIONS) != null ? ref.includes('--enable-source-maps') : void 0));

  if (!(Error.prepareStackTrace || nodeSourceMapsSupportEnabled)) {
    cacheSourceMaps = true;
    patchStackTrace();
  }

  baseURL = pathToFileURL(process.cwd() + '/').href;

  exports.resolve = function(specifier, context, next) {
    var parentURL;
    if (CoffeeScript.FILE_EXTENSIONS.includes(path.extname(specifier))) {
      ({parentURL} = context);
      if (parentURL == null) {
        parentURL = baseURL;
      }
      return {
        shortCircuit: true,
        format: "coffee",
        url: new URL(specifier, parentURL).href
      };
    } else {
      // Not CoffeeScript; pass on to next resolver
      return next(specifier, context);
    }
  };

  exports.load = async function(url, context, next) {
    var js, options, ref1, result;
    // Support only local .coffee files for now
    if (!(context.format === "coffee" && url.startsWith('file:'))) {
      return next(url, context);
    }
    options = module.options || getRootModule(module).options || {};
    // Currently `CoffeeScript.compile` caches all source maps if present. They
    // are available in `getSourceMap` retrieved by `filename`.
    if (cacheSourceMaps || nodeSourceMapsSupportEnabled) {
      options = {
        ...options,
        inlineMap: true
      };
    }
    path = fileURLToPath(url);
    js = CoffeeScript._compileFile(path, options);
    // Add .js extension to enable other JavaScript ESM loaders (e.g. Babel)
    result = (await next(url + '.js', {
      format: "module",
      source: js
    }));
    // Remove .js extension from final URL
    result.responseURL = ((ref1 = result.responseURL) != null ? ref1 : transpiledUrl).replace(/\.js$/, '');
    return result;
  };

  // Utility function to find the `options` object attached to the topmost module.
  getRootModule = function(module) {
    if (module.parent) {
      return getRootModule(module.parent);
    } else {
      return module;
    }
  };

}).call(this);

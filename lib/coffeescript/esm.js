// Generated by CoffeeScript 2.7.0
(function() {
  // CoffeeScript ESM loader

  // Usage: node --loader coffeescript/esm source.coffee
  var CoffeeScript, baseURL, fileURLToPath, fs, module, path, pathToFileURL;

  CoffeeScript = require('./');

  fs = require('fs');

  module = require('module');

  path = require('path');

  ({fileURLToPath, pathToFileURL} = require('url'));

  CoffeeScript.patchStackTrace();

  baseURL = pathToFileURL(process.cwd() + '/').href;

  exports.resolve = function(specifier, context, next) {
    var parentURL;
    if (CoffeeScript.FILE_EXTENSIONS.includes(path.extname(specifier))) {
      ({parentURL} = context);
      if (parentURL == null) {
        parentURL = baseURL;
      }
      return {
        shortCircuit: true,
        format: "coffee",
        url: new URL(specifier, parentURL).href
      };
    } else {
      // Not CoffeeScript; pass on to next resolver
      return next(specifier, context);
    }
  };

  exports.load = async function(url, context, next) {
    var js, options, ref, result;
    // Support only local .coffee files for now
    if (!(context.format === "coffee" && url.startsWith('file:'))) {
      return next(url, context);
    }
    options = module.options || CoffeeScript.helpers.getRootModule(module).options || {};
    // Currently `CoffeeScript.compile` caches all source maps if present. They
    // are available in `getSourceMap` retrieved by `filename`.
    options = {
      ...options,
      inlineMap: true
    };
    path = fileURLToPath(url);
    js = CoffeeScript._compileFile(path, options);
    // Add .js extension to enable other JavaScript ESM loaders (e.g. Babel)
    result = (await next(url + '.js', {
      format: "module",
      source: js
    }));
    // Remove .js extension from final URL
    result.responseURL = ((ref = result.responseURL) != null ? ref : transpiledUrl).replace(/\.js$/, '');
    return result;
  };

}).call(this);

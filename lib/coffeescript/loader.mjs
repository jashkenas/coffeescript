// Generated by CoffeeScript 2.7.0
//!/usr/bin/env coffee
var baseURL, getPackageType, is_coffee;

import {
  readFile
} from "fs/promises";

import {
  readFileSync
} from "fs";

import {
  createRequire
} from "module";

import {
  dirname,
  extname,
  resolve as resolvePath
} from "path";

import {
  cwd
} from "process";

import {
  fileURLToPath,
  pathToFileURL
} from "url";

import CoffeeScript from "./index.cjs";

baseURL = pathToFileURL(`${cwd}/`).href;

is_coffee = (specifier) => {
  return specifier.slice(specifier.lastIndexOf(".") + 1) === 'coffee';
};

export var resolve = (specifier, context, defaultResolve) => {
  var parentURL;
  ({
    parentURL = baseURL
  } = context);
  if (is_coffee(specifier)) {
    return {
      shortCircuit: true,
      url: new URL(specifier, parentURL).href
    };
  }
  return defaultResolve(specifier, context, defaultResolve);
};

export var load = async (url, context, defaultLoad) => {
  var format, rawSource, transformedSource;
  if (is_coffee(url)) {
    format = (await getPackageType(url));
    if (format === "commonjs") {
      return {
        format
      };
    }
    ({
      source: rawSource
    } = (await defaultLoad(url, {
      format
    })));
    transformedSource = CoffeeScript.compile(rawSource.toString(), {
      bare: true,
      filename: url,
      inlineMap: true
    });
    return {
      format,
      source: transformedSource
    };
    //console.log('!!!', )
  }
  return defaultLoad(url, context, defaultLoad);
};

getPackageType = async (url) => {
  var dir, isFilePath, packagePath, type;
  isFilePath = !!extname(url);
  dir = isFilePath ? dirname(fileURLToPath(url)) : url;
  packagePath = resolvePath(dir, "package.json");
  type = (await readFile(packagePath, {
    encoding: "utf8"
  }).then((filestring) => {
    return JSON.parse(filestring).type;
  }).catch((err) => {
    if ((err != null ? err.code : void 0) !== "ENOENT") {
      return console.error(err);
    }
  }));
  if (type) {
    return type;
  }
  return dir.length > 1 && getPackageType(resolvePath(dir, ".."));
};
